@using Ext.Net;
@using Ext.Net.MVC;
@model EventModelCollection

@{
    ViewBag.Title = "Agenda - .:Clínica Odontólogica:.";
    Layout = null;
    var X = Html.X();
}
<!DOCTYPE html>
<html>
<head>
    <title>Agenda de citas</title>
    <link rel="stylesheet" href="@Url.Content("~/Content/calendar.css")" />
    <script src="@Url.Content("~/Scripts/common.js")"></script>
    <style>
        .ext-color-4,
        .ext-ie .ext-color-4-ad,
        .ext-opera .ext-color-4-ad {
            color: #7F0000;
        }

            .ext-cal-day-col .ext-color-4,
            .ext-dd-drag-proxy .ext-color-4,
            .ext-color-4-ad,
            .ext-color-4-ad .ext-cal-evm,
            .ext-color-4 .ext-cal-picker-icon,
            .ext-color-4-x dl,
            .ext-color-4-x .ext-cal-evb {
                background: #7F0000;
            }

        .ext-color-4-x .ext-cal-evb,
        .ext-color-4-x dl {
            border-color: #7C3939;
        }
    </style>
</head>
<body>
    @Html.X().ResourceManager().Namespace("CompanyX")

    @(Html.X().Viewport()
        .Layout("border")
        .Items(
            Html.X().Panel()
                .Height(50)
                .Border(false)
                .Region(Region.North)
                .Cls("app-header")
                .BodyCls("app-header-content"),

            Html.X().Panel()
                .ID("Panel1")
                .Title("Agenda de citas")
                .Layout("border")
                .Region(Region.Center)
                .Cls("app-center")
                .Items(
                   Html.X().Panel()
                        .Width(300)
                        .Region(Region.West)
                        .Border(false)
                        .Cls("app-west")
                        .Items(
                            Html.X().DatePicker()
                                .ID("DatePicker1")
                                .Cls("ext-cal-nav-picker")
                                .Listeners(events =>
                                {
                                    events.Select.Fn = "CompanyX.setStartDate";
                                    events.Select.Scope = "CompanyX";
                                })
                        )
                        .TopBar(X.Toolbar()
                           .Items(X.Button()
                                .Text("Registrar Cita")
                                .Icon(Icon.Add)
                                .Handler("Ext.getCmp('winRegistroCita').show();")
                            )
                        ),
                    Html.X().CalendarPanel()
                        .ID("CalendarPanel1")
                        .Region(Region.Center)
                        .ActiveIndex(2)
                        .Border(false)
                        .DayText("Dia")
                        .WeekText("Semana")
                        .MonthText("Mes")
                        .EventStore(Html.X().EventStore()
                            .ID("EventStore1")
                            .Listeners(events =>
                                events.BeforeSync.Handler = @"Ext.Msg.alert('Sync', 'The EventStore initiates a sync request after that action. The EventStore synchronization is not implemented in that example.');
                                                              this.commitChanges();
                                                              return false;"
                            )
                            .Events(events => events.AddRange(Model))
                            .CustomConfig(cc => cc.Add(new { submitDataUrl = Url.Action("SubmitData") }))
                        )
                        .CalendarStore(Html.X().CalendarStore()
                            .ID("CalendarStore1")
                            .Calendars(
                                new CalendarModel() { CalendarId = 1, Title = "Home" },
                                new CalendarModel() { CalendarId = 2, Title = "Work" },
                                new CalendarModel() { CalendarId = 3, Title = "School" },
                                new CalendarModel() { CalendarId = 4, Title = "Other" }
                            )
                        )
                        // Setting enableFx to false is a workaround for #833
                        .MonthView(Html.X().MonthView()
                            .ShowHeader(true)
                            .ShowWeekLinks(true)
                            .ShowWeekNumbers(true)
                            .EnableFx(false)
                        )
                        .WeekView(Html.X().WeekView()
                            .CustomConfig(cc => cc.Add(new { enableFx = false }))
                        )
                        .DayView(Html.X().DayView()
                            .CustomConfig(cc => cc.Add(new { enableFx = false }))
                        )
                        .Listeners(events =>
                        {
                            events.ViewChange.Fn = "CompanyX.viewChange";
                            events.ViewChange.Scope = "CompanyX";
                            events.EventClick.Fn = "CompanyX.record.show";
                            events.EventClick.Scope = "CompanyX";
                            events.DayClick.Fn = "CompanyX.dayClick";
                            events.DayClick.Scope = "CompanyX";
                            //events.RangeSelect.Fn = "CompanyX.rangeSelect";
                            //events.RangeSelect.Scope = "CompanyX";
                            //events.EventMove.Fn = "CompanyX.record.move";
                            //events.EventMove.Scope = "CompanyX";
                            //events.EventResize.Fn = "CompanyX.record.resize";
                            //events.EventResize.Scope = "CompanyX";
                            //events.EventAdd.Fn = "CompanyX.record.addFromEventDetailsForm";
                            //events.EventAdd.Scope = "CompanyX";
                            //events.EventUpdate.Fn = "CompanyX.record.updateFromEventDetailsForm";
                            //events.EventUpdate.Scope = "CompanyX";
                            //events.EventDelete.Fn = "CompanyX.record.removeFromEventDetailsForm";
                            //events.EventDelete.Scope = "CompanyX";
                        })
                )
        )
    )

    @(Html.X().EventWindow()
        .ID("EventWindow1")
        .Hidden(true)
        .CalendarStoreID("CalendarStore1")
        .Listeners(events =>
        {
            //events.EventAdd.Fn = "CompanyX.record.add";
            //events.EventAdd.Scope = "CompanyX";
            //events.EventUpdate.Fn = "CompanyX.record.update";
            //events.EventUpdate.Scope = "CompanyX";
            //events.EditDetails.Fn = "CompanyX.record.edit";
            //events.EditDetails.Scope = "CompanyX";
            //events.EventDelete.Fn = "CompanyX.record.remove";
            //events.EventDelete.Scope = "CompanyX";
        })
    )

    @(X.Window()
        .ID("winRegistroCita")
        .Title("Nueva Cita")
        .Icon(Icon.Add)
        .Width(600)
        .Height(430)
        .Collapsible(true)
        .Maximizable(false)
        .BodyStyle("background-color: #fff;")
        .BodyPadding(5)
        .Hidden(true)
        .Modal(true)
        .Items(
    X.FormPanel()
        .DefaultAnchor("100%")
                .BodyPadding(5)
                .Items(

            X.FieldContainer()
            .Layout(LayoutType.HBox)
            .Items(
                X.DateField()
                    .Name("finicio")
                    .FieldLabel("Fecha Inicio"),
                X.TimeField()
                    .Name("Hinicio")
                    .FieldLabel("Hora inicio")
                    .TriggerIcon(TriggerIcon.SimpleTime)
                ),
                   X.ComboBox()
        .ID("cbxServicio")
       .FieldLabel("Servicio")
        .Editable(false)
        .QueryMode(DataLoadMode.Local)
        .TriggerAction(TriggerAction.All)
        .Flex(1)
        .EmptyText("Seleccione un servicio")
        .Items(
            new ListItem("Diagnóstico Bucal", "BE"),
            new ListItem("Cirugía", "BR"),
            new ListItem("Endodoncia", "BG"),
            new ListItem("Periodoncia", "CA"),
            new ListItem("Operatoria", "CL"),
            new ListItem("Prótesis", "CY"),
            new ListItem("Pediatría", "FI")
        ),
                   X.ComboBox()
        .ID("cbxMedico")
        .FieldLabel("Medico")
        .Editable(false)
        .QueryMode(DataLoadMode.Local)
        .TriggerAction(TriggerAction.All)
        .Flex(1)
        .EmptyText("Seleccione un medico")
        .Items(
            new ListItem("AHUAT MEDARDO ANTONIO DR", "BE"),
            new ListItem("ARÉVALO AYALA MAURICIO ERNESTO DR", "BR"),
            new ListItem("ARIAS TEJADA DE CLAUDIA DRA", "BG"),
            new ListItem("BAUTISTA GRANADOS JENNY ELIZABETH DE DRA", "CA"),
            new ListItem("CAÑADA MANUEL DR", "CL"),
            new ListItem("DRA KELLY AGUIÑADA ", "CY"),
            new ListItem("DRA MARÍA DE LOS ANGELES ROSALES DE SAMPERA", "FI")
        ),
                   X.TextField()
                        .FieldLabel("Nombre"),
                    X.TextField()
                        .FieldLabel("Apellidos"),

                X.FieldContainer()
            .Layout(LayoutType.HBox)
            .Items(
                        X.TextField()
                        .EmptyText("xxx-xxx-xxxx")
                        .MaskRe("[\\d\\-]")
                        .Regex("^\\d{3}-\\d{3}-\\d{4}$")
                        .RegexText("Must be in the format xxx-xxx-xxxx")
                        .FieldLabel("Telefono"),
                    X.TextField()
                    .EmptyText("xxx-xxx-xxxx")
                        .MaskRe("[\\d\\-]")
                        .Regex("^\\d{3}-\\d{3}-\\d{4}$")
                        .RegexText("Must be in the format xxx-xxx-xxxx")
                        .FieldLabel("Celular")
                ),
                X.FieldContainer()
            .Layout(LayoutType.VBox)
            .Items(
                X.TextField()
                    .Vtype("email")
                        .FieldLabel("Correo electrónico")
                )
            )


                .Buttons(
                    X.Button()
                    .Icon(Icon.Disk)
                    .Text("Generar"),
                    X.Button()
                    .Icon(Icon.Cancel)
                        .Text("Cancelar")
                ))

    )

    @(X.Window()
        .ID("winEditCita")
        .Title("Editar Cita")
        .Icon(Icon.PageEdit)
        .Width(600)
        .Height(430)
        .Collapsible(true)
        .Maximizable(false)
        .BodyStyle("background-color: #fff;")
        .BodyPadding(5)
        .Hidden(true)
        .Modal(true)
        .Items(
    X.FormPanel()
        .DefaultAnchor("100%")
                .BodyPadding(5)
                .Items(

            X.FieldContainer()
            .Layout(LayoutType.HBox)
            .Items(
                X.DateField()
                    .Name("finicioE")
                    .FieldLabel("Fecha Inicio"),
                X.TimeField()
                    .Name("HinicioE")
                    .FieldLabel("Hora inicio")
                    .TriggerIcon(TriggerIcon.SimpleTime)
                ),
                   X.ComboBox()
        .ID("cbxServicioE")
       .FieldLabel("Servicio")
        .Editable(false)
        .QueryMode(DataLoadMode.Local)
        .TriggerAction(TriggerAction.All)
        .Flex(1)
        .EmptyText("Seleccione un servicio")
        .Items(
            new ListItem("Diagnóstico Bucal", "BE"),
            new ListItem("Cirugía", "BR"),
            new ListItem("Endodoncia", "BG"),
            new ListItem("Periodoncia", "CA"),
            new ListItem("Operatoria", "CL"),
            new ListItem("Prótesis", "CY"),
            new ListItem("Pediatría", "FI")
        ),
                   X.ComboBox()
        .ID("cbxMedicoE")
        .FieldLabel("Medico")
        .Editable(false)
        .QueryMode(DataLoadMode.Local)
        .TriggerAction(TriggerAction.All)
        .Flex(1)
        .EmptyText("Seleccione un medico")
        .Items(
            new ListItem("AHUAT MEDARDO ANTONIO DR", "BE"),
            new ListItem("ARÉVALO AYALA MAURICIO ERNESTO DR", "BR"),
            new ListItem("ARIAS TEJADA DE CLAUDIA DRA", "BG"),
            new ListItem("BAUTISTA GRANADOS JENNY ELIZABETH DE DRA", "CA"),
            new ListItem("CAÑADA MANUEL DR", "CL"),
            new ListItem("DRA KELLY AGUIÑADA ", "CY"),
            new ListItem("DRA MARÍA DE LOS ANGELES ROSALES DE SAMPERA", "FI")
        ),
                   X.TextField()
                        .FieldLabel("Nombre"),
                    X.TextField()
                        .FieldLabel("Apellidos"),

                X.FieldContainer()
            .Layout(LayoutType.HBox)
            .Items(
                        X.TextField()
                        .EmptyText("xxx-xxx-xxxx")
                        .MaskRe("[\\d\\-]")
                        .Regex("^\\d{3}-\\d{3}-\\d{4}$")
                        .RegexText("Must be in the format xxx-xxx-xxxx")
                        .FieldLabel("Telefono"),
                    X.TextField()
                    .EmptyText("xxx-xxx-xxxx")
                        .MaskRe("[\\d\\-]")
                        .Regex("^\\d{3}-\\d{3}-\\d{4}$")
                        .RegexText("Must be in the format xxx-xxx-xxxx")
                        .FieldLabel("Celular")
                ),
                X.FieldContainer()
            .Layout(LayoutType.VBox)
            .Items(
                X.TextField()
                    .Vtype("email")
                        .FieldLabel("Correo electrónico")
                )
            )


                .Buttons(
                    X.Button()
                    .Icon(Icon.Disk)
                    .Text("Generar"),
                    X.Button()
                    .Icon(Icon.Cancel)
                        .Text("Cancelar")
                ))

    )
</body>
</html>
